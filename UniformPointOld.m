function [W,N] = UniformPointOld(N,M)
%******************************* UniformPoint ************************************
%% Function: UniformPoint()
%% Description: 
%   Generate a set of uniformly distributed points on the unit hyperplane and 
%   return approximately N uniformly distributed points with M objectives on the unit hyperplane.
%% Steps of Das and Dennis's method:
%   1. Let X be all the (M-1)-combinations of (0/H,1/H,...,(H+M-2)/H), and
%   xij>xi(j+1). for example H=5, M=3, x11=0,x12=[0.2 0.4 0.6 0.8 1.0
%   1.2], the maximum of x11 is 1, the maximum of x12 is 1.2
%   2. For each xij¡ÊX, xij = xij -(j-1)/H. For example x11=0.4,x12=0.8
%   ,then x11'=0.4, x12'=0.6.
%   3. Let S be the reference point set, for each sij¡ÊS and xij¡ÊX,
%       j=1,   sij = xij' -0;
%       1<j<M, sij = xij'-xi(j-1)'
%       j= M,  sij = 1-xi(j-1)'
%   For example x11=0.4,x12=0.8, x11'=0.4, x12'=0.6, then s1=0.4,s2=0.2,s3=0.4. 
%   Disadvantage:  no intermediate point will be generated by Das and Dennis¡¯s method as long as H < M
%%  if H<M, then use Deb and Jain's method,the setps of this method as follows:
%   1. Generate S1 by Das and Dennis¡¯s method as the point set on boundary layer;
%   2. Let S2 be the point set on inside layer, for each sij'¡Ê S2 and sij ¡Ê S1,
%               sij' =1/2*sij +1/(2M);
%   3. The reference point set S = S1 ¡È S2.
% ----------------------------  Function   ---------------------------------
%% Syntax:  
%   [W,N] = UniformPoint(N,M)
%% Parameters:
%   Inputs:
%       N: the number of grey wolves
%       M: the number of objective function
%   Output:
%       N: the number of reference points 
%           (population size will be the same with reference points in the following steps)
%       W: reference points
%% Notes:
%   Due to the requirement of uniform distribution, the number of points
%   cannot be arbitrary, and the number of points in W may be slightly
%   smaller than the predefined size N.
%
%% ----------------------------  Reference  --------------------------------
% 1. Kalyanmoy Deb.An Evolutionary Many-Objective Optimization Algorithm Using Reference-Point-Based
% Nondominated Sorting Approach,Part I: Solving Problems With Box
% Constraints.IEEE Transactions on Evolutionary Computation,2014,18(4):
% 577-601.
% 2. Ye Tian, Xiaoshu Xiang, Xingyi Zhang, Ran Cheng, and Yaochu Jin.Sampling Reference Points on the Pareto Fronts of
% Multi-Objective Optimization Problems,IEEE Congress on Evolutionary Computation (CEC),2018:18133450.
%
%% ----------------------------  Copyright  -------------------------------- 
%% Cited from PlatEMO All rights reserved.
%    
%       Copyright (c) 2021 BIMK Group.
%% Modified by Zhang T.
%                
%   Revision: 1.0.0  Date: 2021-04-01
%************************************************************************

    H1 = 1; % H1: is the number of divisions in each objective
    while nchoosek(H1+M-1,M-1) <= N  % the number of referece points are less thant population size
        H1 = H1 + 1;
    end
    H1=H1 - 1;
    W = nchoosek(1:H1+M-1,M-1) - repmat(0:M-2,nchoosek(H1+M-1,M-1),1) - 1; % step 1 and 2
    W = ([W,zeros(size(W,1),1)+H1]-[zeros(size(W,1),1),W])/H1; % step 3
    if H1 < M
        H2 = 0;
        while nchoosek(H1+M-1,M-1)+nchoosek(H2+M-1,M-1) <= N    % the number of referece points are less thant population size
            H2 = H2 + 1;
        end
        H2 = H2 - 1;
        if H2 > 0
            W2 = nchoosek(1:H2+M-1,M-1) - repmat(0:M-2,nchoosek(H2+M-1,M-1),1) - 1;
            W2 = ([W2,zeros(size(W2,1),1)+H2]-[zeros(size(W2,1),1),W2])/H2;
            W  = [W;W2/2+1/(2*M)];
        end
    end
    W = max(W,1e-6);
    N = size(W,1);
end